# Azure Cost Optimization for Billing Records

## Problem Statement

We have a serverless Azure architecture storing billing records in Cosmos DB. The system is read-heavy, but records older than 3 months are rarely accessed.

Over time, the Cosmos DB size has grown to over 2 million records (up to 300 KB each), causing high costs. We need a cost-optimized solution that preserves availability and API contracts, with no downtime or data loss.

---

## Proposed Solution Overview

- Keep **recent records (â‰¤ 90 days)** in Azure Cosmos DB (hot storage) for fast access.
- Archive **older records (> 90 days)** in **Azure Blob Storage** using cool/archive tiers to reduce costs.
- Implement an **Azure Function middleware** to route read/write requests:
  - Writes always go to Cosmos DB.
  - Reads first try Cosmos DB; if record is not found and is older than 90 days, fallback to Blob Storage.
- This approach maintains existing APIs without changes.
- No downtime or data loss during the migration.
- Simple and maintainable.

---

## Architecture Diagram

![Architecture Diagram](./architecture.svg)

---

## Implementation Details

### Data Archival Process (run as a scheduled Azure Function)

- Query Cosmos DB for records older than 90 days.
- Serialize and upload these records as blobs to Azure Blob Storage (cool/archive tier).
- Mark or delete archived records from Cosmos DB.

### Read Flow (Azure Function Middleware)

```python
def get_billing_record(record_id):
    record = cosmosdb_read(record_id)
    if record:
        return record
    elif is_older_than_90_days(record_id):
        return blob_storage_read(record_id)
    else:
        return None
Write Flow (Azure Function Middleware)
python
Copy
Edit
def write_billing_record(record):
    cosmosdb_write(record)

Summary Table
Feature / Constraint   Met?    Solution
Simplicity             Yes     Serverless Azure Function, native storage solution
No Data Loss / Downtime Yes    Gradual migration, no user impact
API Contracts Unchanged Yes    Access logic is hidden, API remains the same
Cost Optimization      Yes     Blob Storage is 90%+ cheaper than Cosmos DB
Access Latency (Old Data) Yes  Blob retrieval in seconds
Maintenance Overhead   Yes     Low - uses native Azure services
Security / Compliance  Yes     Blob versioning, managed identity, RBAC, logging

Optional Enhancements
Enhancement Description
Blob Index Tags        Faster filtering/search for archived data
Blob Lifecycle Policies Auto-transition from Cool to Archive tier
CDN/Edge Cache         Cache recently accessed cold data
Observability (App Insights) Monitor fallback access frequency/latency
IaC (Bicep/Terraform)  Full infra deployment and config management
